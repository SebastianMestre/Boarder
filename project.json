{
	"match": {
		"title": "`match` expressions",
		"tags": ["language-feature"],
		"text": "Since we are going to have unions, we also need a way to visit them. It would be\ncool to have a `switch`-like expression thing, with exhaustiveness checking and so on.",
		"children": ["match-parse", "match-typecheck"]
	},
	"match-parse": {
		"title": "Parse `match` expressions",
		"tags": ["syntax","parser"],
		"text": "This still needs to be properly though about, but this is a quick mockup.",
		"children": ["match-bnf"]
	},
	"match-bnf": {
		"title": "`match` expressions BNF",
		"tags": ["syntax","bnf"],
		"text": "match      ::= \"match\" \"(\" expression \")\" \"{\" match-case \";\" ... \";\" \"}\"\nmatch-case ::= identifer \"=>\" expression",
		"children": []
	},
	"match-typecheck": {
		"title": "Typecheck `match` expressions",
		"tags": ["type-system"],
		"text": "There are two important parts related to typechecking a match expression: checking\nthat it uses the fields that exist on the type of the matched value, and typechecking\nthe result of the match expression\n\nIt seems sensible to only do the first part only once the type of the matched-on\nvalue is known. But, since the second part may depend on the result of the first\none, we end up with a whole bunch of order-dependance in the typechecker, which I\nwould rather not deal with...\n\nUPDATE: I have thought about this a good deal, and I think I found a solution.\n\nHere it goes:\n\n\n==== What is the problem we are trying to solve? ====\n\nWhen we typecheck a match expression, we learn some things about the type of\nthe thing we are matching on. We do not learn its type, but we do learn some\nfacts that can be helful in further type chcking/deduction\n\nExample:\n\nx := fn (y) {\n  return match (y) {\n    a => 5;\n    b => b;\n  };\n}\n\nThe match expression has fields \"a\" and \"b\", thus, we know that y must be of\nunion type with fields \"a\" and \"b\", but we do not know its actual type.\n\nAlso, we know that (since all branches of a match must have the same type),\nthe field `b` is of type `int`.\n\n==== What tools will we use? ====\n\nFirst, I introduce the idea of a dummy-union. This is a form of typefunc whose\nonly purpose is to help in unification.\n\nA dummy-union has a list of all the identifiers that are known to be in a union\ntypefunc, along with their deduced monotype. It esentially represents a typefunc\nwhich is known to be a union with (at least) certain fields, but whose identity\nis not yet known.\n\nWhen we unify two dummy-unions, we merge their information.\n\nexample:\n\nunify_typefunc(\n  dummy-union{ {{ \"a\", mono_int() },\n                { \"b\", mono_string() },\n                { \"c\", new_var() }} },\n  dummy-union{ {{ \"c\", mono_int() }} });\n\ngives as a result:\n\ndummy-union{ {{ \"a\", mono_int() },\n              { \"b\", mono_string() },\n              { \"c\", mono_int() }} };\n\nWhen we unify a dummy-union with an union, we check that the dummy-union is\ncompatible with the union (i.e. that it doesn't have any extra fields, and that\nthe types of the fields can be unified)\n\nexample:\n\nunify_typefunc(\n  dummy-union{ {{ \"a\", mono_int() },\n                { \"b\", mono_string() }} },\n  union{ {{ \"a\", mono_int() },\n         { \"b\", mono_string() },\n         { \"c\", mono_int() }} });\n\ngives as a result the original union:\n\nunion{ {{ \"a\", mono_int() },\n        { \"b\", mono_string() },\n        { \"c\", mono_int() }} };\n\n==== How can this be used to typecheck match? ====\n\nWhen we typecheck a match expression, we create a new dummy-union typefunc with\nall the fields that were matched on.\nWe then unify this with the typefunc of the value we are matching on.\n\nGoing back to the example from before\n\nx := fn (y) {\n  return match (y) {\n    a => 5;\n    b => b;\n  };\n}\n\nwe can do a step by step of this program being typechecked:\n\ntypecheck x:\n| typecheck fn (y) { ... }:\n| | y : new_var()\n| | return_type : new_var()\n| |\n| | typecheck return:\n| | | typecheck match(y) { a; b; }:\n| | | |   let du = new_dummy_union { {{ \"a\", new_var() },\n| | | |                               { \"b\", new_var() }} }\n| | | |   unify(typeof y, new_term(du, {}))\n| | | |\n| | | |   let x = newvar\n| | | |   unify(x, typeof 5)   // we get int\n| | | |   unify(x, typeof b)   // we learn that the field \"b\" of du has type int\n| | | |   match(y) { ... } : x // the match returns an int\n| | |\n| | | unify(current_function().return_type, typeof match (y) { ... }) // we get int\n|\n| x : generalize(typeof fn (y) { ... }) // we get x : ( du(<>) ) -> int\n\n\nAt the end of typechecking, we can go over all the ast, and check whether anything\nstill has a dummy typefunc in its type. In which case, we can tell that we were\nnot able to do complete deduction, and we can emit an error.\n\n",
		"children": []
	},
	"unions": {
		"title": "Union / sum types",
		"tags": ["language-feature"],
		"text": "Implement unions into the language, along with a way to visit their members",
		"children": [
			"unions-parse"
		]
	},
	"unions-parse": {
		"title": "Parse union / sum types",
		"tags": ["syntax", "parser"],
		"text": "implement parsing of unions in the type system",
		"children": [
			"types-bnf"
		]
	},
	"types-bnf": {
		"title": "Type language BNF",
		"tags": ["syntax", "bnf"],
		"text": "type-expr   ::= mono-type | type-func\n\nmono-type   ::= type-var | type-term | identifier\ntype-var    ::= \"@\" identifier\ntype-term   ::= type-func \"(<\" mono-type \",\" ... \">)\"\n\ntype-func   ::= union-expr | struct-expr | identifier\n\nunion-expr  ::= \"union\"  \"{\" declarator \";\" ... \";\" \"}\"\nstruct-expr ::= \"struct\" \"{\" declarator \";\" ... \";\" \"}\"\n\ndeclarator  ::= identifier \":\" mono-type\n",
		"children": []
	},
	"ctenv-typevars": {
		"title": "Context (DONE)",
		"tags": ["type-system"],
		"text": "Differentiate free variables from unbound ones when generalizing. Add type variables\nto the CompileTimeEnvironment.",
		"children": []
	},
	"hm-rec-rule": {
		"title": "Hindley-Milner [rec] rule (DONE)",
		"tags": ["type-system"],
		"text":"Use TarjanSolver to identify the strongly connected components in the graph of\nfunction calls, apply the rec rule to them in a reverse toposort order.\n\n Make it so types of declarations are not generalized until the whole rec-block is typechecked.",
		"children": ["ctenv-typevars"]
	},
	"gc-handles": {
		"title": "Make GC work (DONE)",
		"tags": ["runtime"],
		"text": "We need to add some form of GC-pointer-handle to prevent GC objects that are being\nmanipulated by the runtime from getting freeâ€™d prematurely.\n\nA possible way to do this is with a std::shared_pointer-esque RAII type: keep a\nhandle-refcount on every object, and have the GC automatically visit it if its\nrefcount is not 0. (do bookkeeping using an unordered_set)",
		"children": []
	}
}
